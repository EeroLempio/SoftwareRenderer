package Interface;

import RenderingEngine.Constructs.BaseObject;
import RenderingEngine.Constructs.EngineObject;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 * ObjectSelectorPanel is a panel for selecting BaseObjects
 * 
 * @author Eero Lempi√∂ el415524@student.uta.fi
 */
public class ObjectSelectorPanel extends javax.swing.JPanel implements ObjectSelectorInterface{
    private RendererModel m_model;
    private TreeSelectionListener m_selectionListener;
    private DefaultMutableTreeNode m_lastNode;
    private List<DefaultMutableTreeNode> m_nodes;
    private DefaultTreeModel m_sceneModel;
    private DefaultMutableTreeNode m_sceneNode;
    private DefaultMutableTreeNode m_lightsNode;
    private DefaultMutableTreeNode m_objectsNode;
    
    /**
     * Creates new form ObjectSelectorPanel
     */
    public ObjectSelectorPanel() {
        initComponents();
        initTable();
    }
    
    /**
     * Sets the RendererModel of this ObjectSelectorPanel to RendererModel rendererModel
     */
    @Override
    public void setModel(RendererModel rendererModel) {
        m_model = rendererModel;
    }

    /**
     * Sets the displayed active object of this ObjectSelectorPanel to BaseObject baseObject
     */
    @Override
    public void setActiveObject(BaseObject baseObject) {
        jTree1.removeTreeSelectionListener(m_selectionListener);
        if(baseObject != null){
            DefaultMutableTreeNode activeNode = null;
            for(DefaultMutableTreeNode node : m_nodes)
                if(node.getUserObject().equals(baseObject)){
                    activeNode = node;
                    break;
            }
            if(activeNode != null)
                jTree1.setSelectionPath(new TreePath(m_sceneModel.getPathToRoot(activeNode)));
            else{
                activeNode = new DefaultMutableTreeNode(baseObject);
                if(baseObject instanceof EngineObject){
                    m_objectsNode.add(activeNode);
                    m_sceneModel.reload(m_objectsNode);
                }
                else{
                    m_lightsNode.add(activeNode);
                    m_sceneModel.reload(m_lightsNode);
                }
                m_nodes.add(activeNode);
            }
        }            
        else
            jTree1.clearSelection();
        jTree1.addTreeSelectionListener(m_selectionListener);
    }

    /**
     * Resets this ObjectSelectorPanels displayed itmes to none
     */
    @Override
    public void reset() {
        m_lightsNode.removeAllChildren();
        m_sceneModel.reload(m_lightsNode);
        m_objectsNode.removeAllChildren();
        m_sceneModel.reload(m_objectsNode);
        m_nodes = new ArrayList<>();
    }
    
    /**
     * Removes BaseObject baseObject from diplay
     */
    @Override
    public void removeObject(BaseObject baseObject) {
        jTree1.removeTreeSelectionListener(m_selectionListener);
        if(baseObject != null){
            jTree1.clearSelection();
            DefaultMutableTreeNode activeNode = null;
            for(DefaultMutableTreeNode node : m_nodes)
                if(node.getUserObject().equals(baseObject)){
                    activeNode = node;
                    m_nodes.remove(node);
                    break;
                }
            if(activeNode != null)
                if(baseObject instanceof EngineObject){
                    m_objectsNode.remove(activeNode);
                    m_sceneModel.reload(m_objectsNode);
                }
                else{
                    m_lightsNode.remove(activeNode);
                    m_sceneModel.reload(m_lightsNode);
                }
        }
        jTree1.addTreeSelectionListener(m_selectionListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SceneObjects = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setBackground(new java.awt.Color(114, 114, 114));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(224, 293));

        SceneObjects.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SceneObjects.setText("Scene Objects");

        jPanel1.setBackground(new java.awt.Color(114, 114, 114));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTree1.setBackground(new java.awt.Color(114, 114, 114));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SceneObjects, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(SceneObjects)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() {
        DefaultMutableTreeNode m_sceneNode = new DefaultMutableTreeNode("Scene");
        m_lightsNode = new DefaultMutableTreeNode("Lights");
        m_sceneNode.add(m_lightsNode);
        m_objectsNode = new DefaultMutableTreeNode("Objects");
        m_sceneNode.add(m_objectsNode);
        m_sceneModel = new DefaultTreeModel(m_sceneNode);
        jTree1.setModel(m_sceneModel);
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.setExpandsSelectedPaths(true);
        jTree1.setScrollsOnExpand(true);
        m_selectionListener = new TreeSelectionListener(){
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
                if(m_model != null){
                    if(node != null && !node.equals(m_sceneNode) && !node.equals(m_lightsNode) && !node.equals(m_objectsNode))
                        m_model.setactiveObject((BaseObject)node.getUserObject());
                    else
                        m_model.setactiveObject(null);
                }
            }
        };
        jTree1.addTreeSelectionListener(m_selectionListener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SceneObjects;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
